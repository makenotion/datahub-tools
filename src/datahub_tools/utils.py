from __future__ import annotations

import json
from pathlib import Path
from typing import Any, Dict, Iterable


def extract_dbt_resources(
    manifest_file: str | Path, resource_type_filter: Iterable[str] | None = None
) -> Dict[str, Dict[str, Any]]:
    """
    :param manifest_file manifest file generated by dbt (e.g. manifest.json)
    :param resource_type_filter An optional resource type filter that will be applied before the resources
      are returned. For example ['snapshot', 'model']
    :return: A dictionary containing the snowflake table name (e.g. prep.core.calendar)
      and the associated dbt manifest dict (table metadata).
    """
    if isinstance(manifest_file, str):
        manifest_file = Path(manifest_file)
    with manifest_file.open() as f:
        manifest = json.load(f)
        manifest_nodes = manifest["nodes"]

    return {
        unique_id: data
        for unique_id, data in manifest_nodes.items()
        if (not resource_type_filter or data["resource_type"] in resource_type_filter)
    }
